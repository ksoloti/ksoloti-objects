<objdefs appVersion="1.0.12">
   <obj.normal id="display" uuid="0c083e83-0280-4cf2-b747-8a00859bb904">
      <sDescription>Interfaces with the OLED display on Ksoloti Gills.
Note that you do NOT need to place a gpio/i2c/config object in your patch anymore for this object to function.</sDescription>
      <author>Ksoloti</author>
      <license>GPL v3.0</license>
      <helpPatch>display gills.axh</helpPatch>
      <inlets>
         <charptr32 name="line1" description="First line of display, can display either 11 (regular) or 21 (narrow) characters."/>
         <charptr32 name="line2" description="Second line of display, can display either 11 (regular) or 21 (narrow) characters."/>
         <charptr32 name="line3" description="Third line of display, can display either 11 (regular) or 21 (narrow) characters."/>
         <charptr32 name="line4" description="Fourth line of display, can display either 11 (regular) or 21 (narrow) characters."/>
         <int32.positive name="mode" description="&lt;html&gt;0: Four lines of text only.&lt;br&gt;1: Line 1 is text, lines 2-4 show a scope (useScope must be on and a scope reference must be entered in the scope textfield!)&lt;br&gt;2: Full screen scope (useScope must be on and a scope reference must be entered in the scope textfield!)"/>
         <bool32.risingfalling name="disable" description="Disable all screen updates."/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="useScope" description="&lt;html&gt;off: No scope function. OLED will always display 4 lines of text.&lt;br&gt;on: Place a scope object in your patch. Enter its name (e.g. scope_1) in the scope text field below. Changing the mode inlet will display the scope either across lines 2-4, or full screen.">
            <MenuEntries>
               <string>off</string>
               <string>on</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
         <objref name="scope" description="If useScope is on, you must enter the name of a scope object from your patch here."/>
         <combo name="narrowFont" description="&lt;html&gt;off: Wide font, 11 characters per line.&lt;br&gt;of: Narrow font, 21 characters per line.">
            <MenuEntries>
               <string>off</string>
               <string>on</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>./font5x8_offset.h</include>
      </includes>
      <depends>
         <depend>SD1</depend>
         <depend>I2CD1</depend>
      </depends>
      <code.declaration><![CDATA[//* LOCAL DATA */

/* Stock Ksoloti Gills and Big Genes use SH1106 type OLED on address 0x3C (a.k.a 0x78 after the necessary 1-bit left shift) by default. */
#define __SH1106
// #define __SSD1306
// #define __SSD1309

#define __I2C_ADDR 0x3C
// #define __I2C_ADDR 0x3D

// #define OLED_INVERT_COLOR

enum KSO_OLED {
    OLEDWIDTH = 128,
    OLEDHEIGHT = 64,
    SETCONTRAST = 0x81, 		// 2byte cmd,256 contrast steps, reset = 7F
    DISPLAYON = 0xAF,   		// entire display on
    DISPLAYOFF = 0xAE,  		// entire display off
    DISPLAYALLON_RESUME = 0xA4,
    NORMALDISPLAY = 0xA6,      // either noninvert 0xA6 or invert 0xA7
    INVERTDISPLAY = 0xA7,
    DEACTIVATE_SCROLL = 0x2E,  // stop control scroll conf by 26 27 29 2A
    MEMORYMODE = 0x20,         // 2byte cmd, 0 horizontal, 1 vertical, 2 page addressing, 3 invalid
    COLUMNADDR = 0x21,         // 3bytes, start, end (included) valid in horizontal or vertical mode
    PAGEADDR = 0x22,           // 3bytes, start, end (included) valid in horizontal or vertical mode
    SETSTARTLINE_0 = 0x40,     // set display RAM start line at 0
    SEGREMAP = 0xA0,           // segment remap 0 mapped to SEG0
    SETMULTIPLEX = 0xA8,       // 2 byte cmd, set mux ratio
    COMSCANDEC = 0xC8,         // scan from COM[N-1] to COM[0] (0xC0 is COM0 to COM[N-1])
    SETDISPLAYOFFSET = 0xD3,   // 2 byte cmd, vertical shift
    SETCOMPINS = 0xDA,         // 2 byte cmd, seq com pin conf, left right remap
    SETDISPLAYCLOCKDIV = 0xD5, // 2 byte cmd, low nibble A[3:0]+1 = div ratio, high nibble A[7:4] freq, reset 1000b
    SETPRECHARGE = 0xD9,       // 2 byte cmd, precharge period A[3:0] phase1 A[7:4] phase2, reset:2
    SETVCOMDETECT = 0xDB,      // 2 byte Vcomh deselect level A[6:4] 000b 0.65xVcc 010b 0.77(reset) 011b 0.83
    CHARGEPUMP = 0x8D,         // Enable charge pump seq: 0x8D, 0x14, 0xAF (Charge pump setting, enable charge pump, display on)
    EXTERNALVCC = 0x1,
    SWITCHCAPVCC = 0x2
};

const uint8_t nibbleToByte[16] = {
    0b00000000,
    0b00000011,
    0b00001100,
    0b00001111,
    0b00110000,
    0b00110011,
    0b00111100,
    0b00111111,
    0b11000000,
    0b11000011,
    0b11001100,
    0b11001111,
    0b11110000,
    0b11110011,
    0b11111100,
    0b11111111
};

const uint8_t tBar[9] = {
    /* LSB up */
    0b00000000,
    0b10000000,
    0b11000000,
    0b11100000,
    0b11110000,
    0b11111000,
    0b11111100,
    0b11111110,
    0b11111111
};

#if (attr_narrowFont == 1)
static const uint8_t TEXT_LINELENGTH= 21;
#else
static const uint8_t TEXT_LINELENGTH= 11;
#endif

uint8_t *txbuf, *rxbuf;
uint8_t mode = 0;
bool disable = false ;
bool dim = false;


uint8_t text[TEXT_LINELENGTH * 4];    // text inputs
uint8_t textBuf[TEXT_LINELENGTH * 4]; // text inputs copy (to avoid flicker)

#if (attr_useScope == 1)
uint8_t tY[OLEDWIDTH];         // scope input copied and rescaled
#endif

void cmd(uint8_t c) {
    txbuf[0] = 0;
    txbuf[1] = c;

    i2cMasterTransmitTimeout(&I2CD1, __I2C_ADDR, txbuf, 2, rxbuf, 0, 30);
}


void cmd(uint8_t c1, uint8_t c2) {
    cmd(c1);
    cmd(c2);
}


void cmd(uint8_t c1, uint8_t c2, uint8_t c3) {
    cmd(c1, c2);
    cmd(c3);
}


/* returns i */
int drawTxt(int i, int NBC, uint8_t *tb, int page, uint8_t *tPage) {
    int nc; for (nc = 0; nc < NBC; nc++) {
        int ascii_32 = tb[nc] - ' ';

        const uint8_t *adChar = font5x8_offset + ascii_32 * 5;

        uint8_t slice; for (slice = 0; slice < 5; slice++) { // slices are two pixel wide

            uint8_t s;
            if ((page & 1) == 0) {
                s = nibbleToByte[adChar[slice] & 15]; // low nibble
            }
            else {
                s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
            }

            /* two pixels wide */
            tPage[i++] = s;
#if (attr_narrowFont == 0)
            tPage[i++] = s;	
#endif

        }

        /* separator space 1 pixel wide => 11 pixels per char */
        tPage[i++] = 0;
    }

    return i;
}


/*
 * Scaled x2 text
 * Returns a page to be sent to the OLED based on contents of text
 */
void calcTextPage(int page, uint8_t tPage[OLEDWIDTH]) {
    int i = 0;
    int tLine = page / 2;
    uint8_t *tb = textBuf + TEXT_LINELENGTH * tLine;

    if (tb[0] >= ' ') { /* full text line */
        i = drawTxt(i, TEXT_LINELENGTH, tb, page, tPage);
    }
    else if (tb[0] == 1) { /* strbar */

        uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;
        i = drawTxt(i, 5, tb + 2, page, tPage);

        while (i < 63) {
            tPage[i++] = 0;
        } /* space padding */

        if (tb[1] < OLEDWIDTH) { /* positive value => filled bar */
            tPage[i++] = 0;
            for (i = OLEDHEIGHT; i < 63 + tb[1] && i < OLEDWIDTH; i++) {
                tPage[i] = filledBar;
            }
        }
        else { /* negative value => hollow bar */
            tPage[i++] = filledBar;

            uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;

            for (i = OLEDHEIGHT; i < 63 + 256 - tb[1] && i < 127; i++) {
                tPage[i] = hollowBar;
            }

            tPage[i++] = filledBar;
        }
    }
    else if (tb[0] == 2) { /* bar */
        uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;

        if (tb[1] <= OLEDWIDTH) { /* positive value => filled bar */
            tPage[i++] = 0;

            for (i = 0; i < tb[1]; i++) {
                tPage[i] = filledBar;
            }
        }
        else { /* negative value => hollow bar */
            tPage[i] = filledBar;
            i++;
            uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;
            for (; i < 256 - tb[1]; i++) {
                tPage[i] = hollowBar;
            }
            tPage[i] = filledBar;
            i++;
        }
    }
    else if (tb[0] == 3) { // strbar2
        uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;
        i = drawTxt(i, 5, tb + 3, page, tPage);

        for (; i < 63; i++) {
            tPage[i] = 0;
        } // space padding

        int v = tb[1 + (page & 1)];

        if (v < OLEDWIDTH) { // positive value => filled bar
            tPage[i] = 0;
            i++;
            for (i = OLEDHEIGHT; i < 63 + v && i < OLEDWIDTH; i++) {
                tPage[i] = filledBar;
            }
        }
        else { // negative value => hollow bar
            tPage[i] = filledBar;
            i++;
            uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
            for (i = OLEDHEIGHT; i < 63 + 256 - v && i < 127; i++) {
                tPage[i] = hollowBar;
            }
            tPage[i] = filledBar;
            i++;
        }
    }
    else if (tb[0] == 4) { // bar dble
        uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;

        int v = tb[1 + (page & 1)];
        if (v <= OLEDWIDTH) { // positive value => filled bar
            for (i = 0; i < v; i++) {
                tPage[i] = filledBar;
            }
        }
        else { // negative value => hollow bar
            tPage[i] = filledBar;
            i++;
            uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
            for (; i < 256 - v; i++) {
                tPage[i] = hollowBar;
            }
            tPage[i] = filledBar;
            i++;
        }
    }

    for (; i < OLEDWIDTH; i++) {
        tPage[i] = 0;
    } // space padding
}

/*
page0
    1
    .
    .
    7
*/

uint8_t vBar(uint8_t val, int page) {
    uint8_t _page = 7 - (val / 8);

    if (page > _page) {
        return 0b11111111; // below => light
    }
    else if (page < _page) {
        return 0; // above => dark
    }
    else {
        return tBar[val & 7];
    }
}


#if (attr_useScope == 1)
/*
 * On the OLED display, a "page" is a 128x8 stripe of pixels
 * described by 128 bytes. The 128x64 OLED consists of 8 "pages"
 * We calculate and transmit one page at a time.
 * It saves memory as smaller buffers are enough to transmit them.
 */
void calcScopePage(int page, uint8_t tPage[OLEDWIDTH]) {
    uint16_t y0 = tY[0];
    uint16_t y1 = tY[1];
    uint16_t y2;

    uint8_t i; for (i = 0; i < OLEDWIDTH; i++) {
        if (i < 127) {
            y2 = tY[i + 1];
        }

        uint16_t yM, ym;
        yM = ym = y1;

        uint16_t y = (y0 + y1) >> 1;
        yM = y > yM ? y : yM;
        ym = y < ym ? y : ym;

        y = (y2 + y1) >> 1;

        yM = y > yM ? y : yM;
        ym = y < ym ? y : ym;

        if (ym == yM) {
            if (yM > 0) { ym--; }
            else { yM++; }
        }

        tPage[i] = vBar(yM, page) & ~vBar(ym, page);

        y0 = y1;
        y1 = y2;
    }
}
#endif


void sendPage(int page) {
    /*
     * Note: I consider that having a little flickering is not a big deal
     * (compared to potential audio glitches).
     * So, I do not use the chSysLock() chSysUnlock to protect the memcpy.
     */

    i2cAcquireBus(&I2CD1);

    /* prepare transmission to the "page" */
    cmd(COLUMNADDR, 0, 127);   /* Column start end */
    cmd(PAGEADDR, page, page); /* Page start end */

#if defined(__SH1106)
    cmd(0xB0 + page);     /* set page address */
    cmd(2 & 0xF);         /* set lower column address */
    cmd(0x10 | (2 >> 4)); /* set higher column address */
#endif

    i2cReleaseBus(&I2CD1);

#if (attr_useScope == 1)
    if (mode == 0) {
        /* 4 text lines */
        /* on the beginning of drawing (page 0) we update the buffers */
        if (page == 0) {
            memcpy(textBuf, text, TEXT_LINELENGTH * 4);
        }

        calcTextPage(page, txbuf + 1);
    }
    else if (mode == 1) {
        /* Title and scope */
        /* on the beginning of drawing (page 0) we update the buffers */
        if (page == 0) {
            // update the textBuffer
            memcpy(textBuf, text, TEXT_LINELENGTH * 4);
            // update scope buffer
            memcpy(tY, attr_scope.t, OLEDWIDTH);


            // scale for the display
            int8_t *stY = (int8_t *)tY;
            uint8_t i; for (i = 0; i < OLEDWIDTH; i++) {
                tY[i] = ((stY[i] + OLEDHEIGHT) * 3) >> 3;
            }
        }

        if (page < 2) {
            calcTextPage(page, txbuf + 1);
        }
        else {
            calcScopePage(page, txbuf + 1);
        }
    }
    else if (mode >= 2) {
        /* Full screen scope */
        /* On the beginning of drawing (page 0) we update the buffers */
        if (page == 0) {
            /* Update scope buffer */
            memcpy(tY, attr_scope.t, OLEDWIDTH);

            /* Scale for the display */
            int8_t *stY = (int8_t *)tY;
            uint8_t i; for (i = 0; i < OLEDWIDTH; i++) {
                tY[i] = (stY[i] + OLEDHEIGHT) >> 1;
            }
        }

        calcScopePage(page, txbuf + 1);
    }
#else
        /* 4 text lines */
        /* on the beginning of drawing (page 0) we update the buffers */
        if (page == 0) {
            memcpy(textBuf, text, TEXT_LINELENGTH * 4);
        }

        calcTextPage(page, txbuf + 1);
#endif

    /* Transmit the page */
    txbuf[0] = 0x40;

    i2cAcquireBus(&I2CD1);
    i2cMasterTransmitTimeout(&I2CD1, __I2C_ADDR, txbuf, 129, rxbuf, 0, 30);
    i2cReleaseBus(&I2CD1);
}


void setup() {
    static uint8_t _txbuf[132] __attribute__((section(".sram2")));
    static uint8_t _rxbuf[8]   __attribute__((section(".sram2")));

    txbuf = _txbuf;
    rxbuf = _rxbuf;

    i2cAcquireBus(&I2CD1);

#if (defined(__SH1106) || defined(__SSD1306))
    cmd(DISPLAYOFF);
    // 2 byte cmd,
    //  low nibble A[3:0]+1 = div ratio,
    //  high nibble A[7:4] freq  reset 1000b
    cmd(SETDISPLAYCLOCKDIV, 0x80);
    cmd(SETMULTIPLEX, OLEDHEIGHT - 1);
#if (defined(__SSD1306))
    cmd(SETDISPLAYOFFSET, 0x00);
#else
    cmd(SETDISPLAYOFFSET, 0x01);
#endif
    cmd(SETSTARTLINE_0);
    cmd(CHARGEPUMP, 0x14);
    cmd(MEMORYMODE, 0x00); // horizontal
    cmd(SEGREMAP | 0x1);
    cmd(COMSCANDEC);
    // 128 x 64
    cmd(SETCOMPINS, 0x12);
    cmd(SETCONTRAST, 0xCF);
    cmd(SETPRECHARGE, 0xF1);
    cmd(SETVCOMDETECT, 0x40);
    cmd(DISPLAYALLON_RESUME);
#ifdef OLED_INVERT_COLOR
    cmd(INVERTDISPLAY);
#else
    cmd(NORMALDISPLAY);
#endif
    cmd(DEACTIVATE_SCROLL);
    cmd(DISPLAYON);
#else
    cmd(DISPLAYOFF);
    cmd(SETDISPLAYCLOCKDIV, 0x0a0); // vs 80
    cmd(SETMULTIPLEX, 0x03f);       // vs not in comment
    cmd(SETSTARTLINE_0);            // idem
    cmd(MEMORYMODE, 0x00);          // 02 vs00      /* page addressing mode vs line addressing mode*/
    cmd(SEGREMAP | 0x1);            // idem
    cmd(COMSCANDEC);                // idem
    // Flipmode
    // U8X8_C(0x0a0),                               /* segment remap a0/a1*/
    // U8X8_C(0x0c0),                               /* c0: scan dir normal, c8: reverse */
    cmd(SETCOMPINS, 0x012);         // idem         /* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
    cmd(SETCONTRAST, 0x06f);        // vs 0xCF      /* [2] set contrast control */
    cmd(SETPRECHARGE, 0x0d3);       // vs 0xF1      /* [2] pre-charge period 0x022/f1*/
    cmd(SETVCOMDETECT, 0x020);      // vs 0x40      /* vcomh deselect level */
    // if vcomh is 0, then this will give the biggest range for contrast control issue #98
    // restored the old values for the noname constructor, because vcomh=0 will not work for all OLEDs, #116
    cmd(DEACTIVATE_SCROLL);         // idem         /* Deactivate scroll */
    cmd(DISPLAYALLON_RESUME);       // idem         /* output ram to display */
#ifdef OLED_INVERT_COLOR
    cmd(INVERTDISPLAY);
#else
    cmd(NORMALDISPLAY);             // idem         /* none inverted normal display mode */
#endif
    cmd(DISPLAYON);
#endif

    i2cReleaseBus(&I2CD1);
}


msg_t ThreadX2() {
    setup();

    while (!chThdShouldTerminate()) {
        if (!disable) {
            uint8_t i; for (i = 0; i < 8; i++) {
                sendPage(i);
            }
        }
        chThdSleepMilliseconds(32);
    }

    chThdExit((msg_t)0);
}


static msg_t ThreadX(void *arg) {
    ((attr_parent *)arg)->ThreadX2();
}


/* 128 is not enough, try 192 <-- */
WORKING_AREA(waThreadX, 192);
Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[/* INIT CODE */

#ifndef __I2C_CONFIGURED
#define __I2C_CONFIGURED
palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(4) | PAL_STM32_PUDR_PULLUP| PAL_STM32_OTYPE_OPENDRAIN);// SCL
palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(4) | PAL_STM32_PUDR_PULLUP| PAL_STM32_OTYPE_OPENDRAIN);// SDA

static const I2CConfig i2cfg = {
    OPMODE_I2C,
    400000,
    FAST_DUTY_CYCLE_2,
};

i2cStart(&I2CD1, &i2cfg);
#endif


uint8_t i; for (i = 0; i < TEXT_LINELENGTH * 4; i++) {
    text[i] = textBuf[i] = ' ';
}

Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, (tfunc_t)ThreadX, (void *)this);]]></code.init>
      <code.dispose><![CDATA[chThdTerminate( Thd );
chThdWait( Thd );

#ifdef __I2C_CONFIGURED
#undef __I2C_CONFIGURED
i2cStop(&I2CD1);
palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_ANALOG);
#endif]]></code.dispose>
      <code.krate><![CDATA[/* K-RATE CODE */

disable = inlet_disable; /* can be useful when playing with future modules targetting the same display */
mode    = inlet_mode;


if (inlet_line1 != NULL) {
    int i = 0;

    while (i < TEXT_LINELENGTH & inlet_line1[i] != '\0') {
        text[i] = inlet_line1[i];
        i++;
    }

    while (i < TEXT_LINELENGTH) {
        text[i] = ' ';
        i++;
    }
}

if (mode == 0) {
    if (inlet_line2 != NULL) {
        int i = 0;

        while (i < TEXT_LINELENGTH & inlet_line2[i] != '\0') {
            text[i + TEXT_LINELENGTH] = inlet_line2[i];
            i++;
        }

        while (i < TEXT_LINELENGTH) {
            text[i + TEXT_LINELENGTH] = ' ';
            i++;
        }
    }

    if (inlet_line3 != NULL) {
        int i = 0;

        while (i < TEXT_LINELENGTH & inlet_line3[i] != '\0') {
            text[i + 2 * TEXT_LINELENGTH] = inlet_line3[i];
            i++;
        }

        while (i < TEXT_LINELENGTH) {
            text[i + 2 * TEXT_LINELENGTH] = ' ';
            i++;
        }
    }

    if (inlet_line4 != NULL) {
        int i = 0;

        while (i < TEXT_LINELENGTH & inlet_line4[i] != '\0') {
            text[i + 3 * TEXT_LINELENGTH] = inlet_line4[i];
            i++;
        }
        while (i < TEXT_LINELENGTH) {
            text[i + 3 * TEXT_LINELENGTH] = ' ';
            i++;
        }
    }
}]]></code.krate>
   </obj.normal>
</objdefs>