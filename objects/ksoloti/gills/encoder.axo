<objdefs appVersion="1.0.12">
   <obj.normal id="encoder" uuid="8d8c7129-cce1-491f-98b4-6ecb6355cfee">
      <sDescription>Reads the rotary encoder on Ksoloti Gills.
&quot;min&quot;, &quot;max&quot; set the range. Default is 0 to 127.
When the &quot;set&quot; inlet changes, the value is set directly (good for setting init or preset values, modulation).</sDescription>
      <author>Gavin, Ksoloti</author>
      <license>BSD</license>
      <helpPatch>logic.axh</helpPatch>
      <inlets>
         <int32.bipolar name="set" description="Set value directly. Useful for presets, modulation"/>
      </inlets>
      <outlets>
         <int32.bipolar name="out" description="encoder value"/>
         <bool32 name="sw" description="switch output"/>
      </outlets>
      <displays>
         <int32.label name="value" description="encoder value"/>
         <bool32 name="switch" description="switch output"/>
      </displays>
      <params/>
      <attribs>
         <spinner name="min" MinValue="-65536" MaxValue="65535" DefaultValue="0"/>
         <spinner name="max" MinValue="-65536" MaxValue="65535" DefaultValue="127"/>
      </attribs>
      <code.declaration><![CDATA[#ifndef GILLS_ENC_PORT /* Check for this one define to represent all below */
#define GILLS_ENC_PORT GPIOC
#define GILLS_ENC_A_PIN 7
#define GILLS_ENC_B_PIN 1

#define GILLS_ENC_SW_PORT GPIOA
#define GILLS_ENC_SW_PIN 9
#endif

int32_t encoder_val;
int32_t set_last;

bool_t b;
bool_t b_last;

uint8_t counter;]]></code.declaration>
      <code.init><![CDATA[/* Configure encoder pins as input */
palSetPadMode(GILLS_ENC_PORT, GILLS_ENC_A_PIN, PAL_MODE_INPUT_PULLUP);
palSetPadMode(GILLS_ENC_PORT, GILLS_ENC_B_PIN, PAL_MODE_INPUT_PULLUP);

/* Configure encoder switch as input */
palSetPadMode(GILLS_ENC_SW_PORT, GILLS_ENC_SW_PIN, PAL_MODE_INPUT_PULLDOWN);

encoder_val = 0;
set_last = 0;

b = true;
b_last = true;

counter = 0;]]></code.init>
      <code.krate><![CDATA[if (!counter) {
	/* If set inlet has changed, set encoder value directly */
	if (inlet_set != set_last) {
		set_last = encoder_val = inlet_set;
		/* Limit value to min, max attributes */
		encoder_val = encoder_val > attr_max ? attr_max : encoder_val;
		encoder_val = encoder_val < attr_min ? attr_min : encoder_val;
	}
	
	b = palReadPad(GILLS_ENC_PORT, GILLS_ENC_A_PIN);
	
	/* Encoder pins A, B (but not the encoder switch) are pulled up, i.e. LOW means triggered. */
	if (!b && b_last) {
		/* If pin B is low but wasn't before, we have caught an event. */
			
		if (palReadPad(GILLS_ENC_PORT, GILLS_ENC_B_PIN)) {
			/* If pin A is currently HIGH it means we're turning counterclockwise */
			if (encoder_val > attr_min) encoder_val -= 1;
		}
		else {
			/* If pin A is currently LOW it means we're turning clockwise */
			if (encoder_val < attr_max) encoder_val += 1;
		}
	}
	
	/* Register changes */
	b_last = b;
	outlet_out = disp_value = encoder_val;
	
	
	/* Now read encoder switch */
	outlet_sw = disp_switch = palReadPad(GILLS_ENC_SW_PORT, GILLS_ENC_SW_PIN)<<27;
}
++counter %= 8;]]></code.krate>
   </obj.normal>
</objdefs>